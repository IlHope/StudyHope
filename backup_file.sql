--
-- PostgreSQL database dump
--

-- Dumped from database version 16.3
-- Dumped by pg_dump version 16.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: Answers_answer; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Answers_answer" (
    id bigint NOT NULL,
    option_id_id bigint NOT NULL,
    question_id_id bigint NOT NULL
);


ALTER TABLE public."Answers_answer" OWNER TO postgres;

--
-- Name: Answers_answer_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Answers_answer" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Answers_answer_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Answers_answer_student_id; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Answers_answer_student_id" (
    id bigint NOT NULL,
    answer_id bigint NOT NULL,
    customuser_id bigint NOT NULL
);


ALTER TABLE public."Answers_answer_student_id" OWNER TO postgres;

--
-- Name: Answers_answer_student_id_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Answers_answer_student_id" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Answers_answer_student_id_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Chapters_chapter; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Chapters_chapter" (
    id bigint NOT NULL,
    chapter_name character varying(150) NOT NULL,
    course_id_id bigint NOT NULL
);


ALTER TABLE public."Chapters_chapter" OWNER TO postgres;

--
-- Name: Chapters_chapter_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Chapters_chapter" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Chapters_chapter_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Content_content; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Content_content" (
    id bigint NOT NULL,
    content_text text NOT NULL,
    chapter_id_id bigint NOT NULL
);


ALTER TABLE public."Content_content" OWNER TO postgres;

--
-- Name: Content_content_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Content_content" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Content_content_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Courses_course; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Courses_course" (
    id bigint NOT NULL,
    course_name character varying(150) NOT NULL,
    course_description text NOT NULL,
    creation_date timestamp with time zone NOT NULL,
    image character varying(100) NOT NULL
);


ALTER TABLE public."Courses_course" OWNER TO postgres;

--
-- Name: Courses_course_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Courses_course" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Courses_course_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: CustomUsers_customuser; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."CustomUsers_customuser" (
    id bigint NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    educational_subject character varying(150) NOT NULL,
    is_teacher boolean NOT NULL
);


ALTER TABLE public."CustomUsers_customuser" OWNER TO postgres;

--
-- Name: CustomUsers_customuser_course_id; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."CustomUsers_customuser_course_id" (
    id bigint NOT NULL,
    customuser_id bigint NOT NULL,
    course_id bigint NOT NULL
);


ALTER TABLE public."CustomUsers_customuser_course_id" OWNER TO postgres;

--
-- Name: CustomUsers_customuser_course_id_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."CustomUsers_customuser_course_id" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."CustomUsers_customuser_course_id_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: CustomUsers_customuser_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."CustomUsers_customuser_groups" (
    id bigint NOT NULL,
    customuser_id bigint NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public."CustomUsers_customuser_groups" OWNER TO postgres;

--
-- Name: CustomUsers_customuser_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."CustomUsers_customuser_groups" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."CustomUsers_customuser_groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: CustomUsers_customuser_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."CustomUsers_customuser" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."CustomUsers_customuser_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: CustomUsers_customuser_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."CustomUsers_customuser_user_permissions" (
    id bigint NOT NULL,
    customuser_id bigint NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public."CustomUsers_customuser_user_permissions" OWNER TO postgres;

--
-- Name: CustomUsers_customuser_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."CustomUsers_customuser_user_permissions" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."CustomUsers_customuser_user_permissions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Options_option; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Options_option" (
    id bigint NOT NULL,
    option_text text NOT NULL,
    question_id_id bigint NOT NULL,
    "isCorrect" boolean NOT NULL
);


ALTER TABLE public."Options_option" OWNER TO postgres;

--
-- Name: Options_option_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Options_option" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Options_option_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Questions_question; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Questions_question" (
    id bigint NOT NULL,
    question_text text NOT NULL,
    test_id_id bigint NOT NULL,
    question_type character varying(2) NOT NULL
);


ALTER TABLE public."Questions_question" OWNER TO postgres;

--
-- Name: Questions_question_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Questions_question" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Questions_question_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Results_result; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Results_result" (
    id bigint NOT NULL,
    score integer NOT NULL,
    test_id_id bigint NOT NULL,
    date_completion timestamp with time zone NOT NULL
);


ALTER TABLE public."Results_result" OWNER TO postgres;

--
-- Name: Results_result_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Results_result" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Results_result_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Results_result_student_id; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Results_result_student_id" (
    id bigint NOT NULL,
    result_id bigint NOT NULL,
    customuser_id bigint NOT NULL
);


ALTER TABLE public."Results_result_student_id" OWNER TO postgres;

--
-- Name: Results_result_student_id_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Results_result_student_id" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Results_result_student_id_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Testings_testing; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Testings_testing" (
    id bigint NOT NULL,
    testing_name character varying(150) NOT NULL,
    creation_date timestamp with time zone NOT NULL,
    course_id_id bigint NOT NULL
);


ALTER TABLE public."Testings_testing" OWNER TO postgres;

--
-- Name: Testings_testing_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Testings_testing" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Testings_testing_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id bigint NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- Data for Name: Answers_answer; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Answers_answer" (id, option_id_id, question_id_id) FROM stdin;
\.


--
-- Data for Name: Answers_answer_student_id; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Answers_answer_student_id" (id, answer_id, customuser_id) FROM stdin;
\.


--
-- Data for Name: Chapters_chapter; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Chapters_chapter" (id, chapter_name, course_id_id) FROM stdin;
6	Web-Scrapping	1
7	Web-Scraping: Инструменты для Web-Scraping: BeautifulSoup, Scrapy и другие	1
8	Web-Scrapping: BeautifulSoup	1
9	Тематическое моделирование	1
10	Тематическое моделирование: Модели	1
11	Тематическое моделирование: Библиотеки	1
12	Тематическое моделирование: Стоп-слова	1
13	Нейросетевое моделирование	1
14	Нейросетевое моделирование: Основные этапы	1
15	Нейросетевое моделирование: Слои	1
16	Нейросетевое моделирование: Обратное распространение ошибки	1
17	Нейросетевое моделирование: Фреймворки	1
19	Mathcad	3
20	Mathcad: Типы графиков	3
21	Mathcad: 2d Графики	3
22	Mathcad: 3d Грифики	3
23	Mathcad: Экспорт	3
24	Mathcad: Trace	3
25	Mathcad: MathFormat	3
26	Mathcad: Задание линии цвета для графика	3
27	Mathcad: Добавление легенды	3
28	Mathcad: Построеник контурных графиков	3
29	Mathcad: Установка границ вертикальной оси	3
30	Знания о предметной области	4
31	Знания о методах решения задач	4
32	Знания об операционной среде	4
33	Знания о свойствах знаний	4
34	Классическая интерпретация баз знаний	4
35	Формы представления баз знаний	4
36	Правила и продукционные системы	4
37	Факты и декларативные знания	4
38	Фреймы	4
39	Семантические сети	4
40	Онтологии	4
41	Сценарии (ситуационные модели)	4
42	База знаний (по схеме Поспелова)	4
43	Что такое DOM?	5
44	Языки для стилизации веб-страниц	5
45	Протоколы для передачи данных между клиентом и сервером	5
46	Что такое AJAX?	5
47	Тег для создания гиперссылки в HTML	5
48	Метод в JavaScript для отправки HTTP-запроса	5
49	Глобальный объект в JavaScript	5
50	Роль библиотеки React	5
51	Компоненты в контексте React	5
52	Что такое webpack?	5
53	Тестирование программного обеспечения (ПО)	6
54	Статическое тестирование	6
55	Тестирование совместимости	6
56	Динамическое тестирование	6
57	Инструменты для автоматического функционального тестирования веб-приложений	6
58	Черный ящик (Black Box Testing)	6
59	Интеграционное тестирование	6
60	Нагрузочное тестирование (Load Testing)	6
61	Тестовый сценарий (Test Case)	6
62	Регрессионное тестирование (Regression Testing)	6
\.


--
-- Data for Name: Content_content; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Content_content" (id, content_text, chapter_id_id) FROM stdin;
11	Web-Scraping - это процесс извлечения данных из веб-сайтов. Этот метод позволяет автоматизировать сбор информации с различных интернет-ресурсов, что очень удобно, если нужно анализировать большое количество данных или отслеживать изменения на сайтах.	6
12	Web-Scraping можно использовать для множества целей: от мониторинга цен на товары и анализа рынка до сбора контактов для маркетинговых целей или извлечения текстов и изображений для последующего анализа.	6
13	Для осуществления web-сбора данных используются различные инструменты и технологии, такие как библиотеки BeautifulSoup для парсинга HTML-кода, Selenium для автоматизации работы с веб-браузерами, или API для получения данных напрямую из веб-серверов.	6
14	1. BeautifulSoup: Это библиотека Python, которая позволяет удобно парсить HTML-код веб-страниц и извлекать нужные данные. BeautifulSoup предоставляет простой и удобный интерфейс для работы с HTML-данными, что делает процесс извлечения информации из веб-сайтов более доступным.	7
15	2. Scrapy: Это мощный фреймворк для Python, специально созданный для web-скрапинга и позволяющий создавать масштабируемые и эффективные скраперы. Scrapy обладает широким функционалом, включая возможность обработки JavaScript, автоматическое обнаружение ссылок и параллельную обработку данных.	7
16	3. Selenium: Это инструмент для автоматизации веб-браузеров, который может использоваться для web-скрапинга и тестирования веб-приложений. Selenium позволяет запускать браузеры в автоматическом режиме, взаимодействовать с веб-страницами и извлекать данные, как если бы это делал человек.	7
17	4. Scrapy Cloud: Это облачный сервис, предоставляемый разработчиками Scrapy, который обеспечивает возможность запуска и мониторинга скраперов в облаке. Scrapy Cloud позволяет управлять процессом извлечения данных на удаленных серверах, оптимизируя использование ресурсов и упрощая управление скраперами.	7
19	Одним из популярных инструментов для web scraping является библиотека BeautifulSoup, которая позволяет легко парсить HTML и XML файлы. BeautifulSoup позволяет разработчикам извлекать данные из HTML-документа на основе различных критериев, таких как теги, атрибуты и текстовое содержимое.	8
20	Одним из часто используемых методов BeautifulSoup является метод find, который позволяет искать первый элемент, соответствующий заданным критериям. Например, чтобы найти элемент по его атрибуту id, мы используем метод find с указанием атрибута id в качестве аргумента.	8
22	При выполнении web scraping, важно соблюдать правила приличия и избегать блокировки со стороны серверов. Один из способов обойти некоторые основы безопасности — это использовать HTTP-заголовки, чтобы маскировать запросы под обычный браузер. Часто используемый заголовок для этого — User-Agent. Он сообщает серверу информацию о клиенте, который выполняет запрос.	8
23	Тематическое моделирование — это метод анализа текстов, который позволяет обнаружить скрытые темы в большом количестве документов. Этот метод используется для упрощения анализа и обработки больших объемов текстовой информации, например, новостных статей, пользовательских отзывов или научных публикаций.	9
24	Наиболее распространенной моделью для тематического моделирования является Latent Dirichlet Allocation (LDA). LDA — это статистическая модель, которая представляет документы как смеси тем, где каждая тема характеризуется распределением слов. Эта модель позволяет определить, какие темы присутствуют в документах и какие слова чаще всего встречаются в каждой теме.	10
25	LDA работает следующим образом:\r\n1. Инициализация: предполагается некоторое количество тем и случайно распределяются слова по темам.\r\n2. Обновление: итеративный процесс, в котором пересчитываются вероятности принадлежности слов к темам и тем — к документам.\r\n3. Конвергенция: процесс продолжается до тех пор, пока распределения не стабилизируются.	10
26	LDA позволяет анализировать тексты без предварительных аннотаций и вручную заданных категорий, что делает её мощным инструментом для работы с большими объемами текстовой информации.	10
27	Для тематического моделирования в Python широко используется библиотека Gensim. Gensim — это удобный и мощный инструмент для моделирования тем, который предоставляет простые в использовании интерфейсы для работы с LDA и другими алгоритмами тематического моделирования.	11
28	Gensim поддерживает различные методы и обладает высокой производительностью, что делает её подходящей для обработки больших корпусов текстов. Основная задача Gensim — помочь пользователям быстро извлекать смысленные темы из текстовых данных с минимальными усилиями.	11
29	Стоп-слова — это часто встречающиеся слова, которые сами по себе не несут значимой информации (например, в, на, и, что и т.д.). В тематическом моделировании важно учитывать стоп-слова по нескольким причинам:\r\n1. Фильтрация шума: Стоп-слова могут создавать шум и искажения в результатах моделирования, так как они не несут конкретной темы.\r\n2. Снижение размерности: Удаление стоп-слов уменьшает размерность данных, что делает модели более эффективными и точными.\r\n3. Улучшение интерпретируемости: Исключение стоп-слов позволяет сосредоточиться на значимых словах, что улучшает интерпретируемость выявленных тем.	12
30	В процессе предварительной обработки текстов для тематического моделирования, часто используется список стоп-слов, которые убираются из анализируемых текстов для повышения качества моделирования.	12
31	Нейросетевое моделирование — это процесс создания, обучения и использования искусственных нейронных сетей для решения различных задач, таких как классификация, регрессия, кластеризация и другие виды анализа данных. Нейронные сети, вдохновленные биологическими нейронными системами, состоят из множества взаимосвязанных вычислительных единиц, называемых нейронами, которые работают вместе для обработки и анализа данных.	13
32	Нейронные сети состоят из различных слоев, каждый из которых выполняет определенные функции по преобразованию входных данных. Одним из ключевых типов слоев, часто используемых для нелинейного преобразования данных, является активационный слой. Активационные функции позволяют нейронным сетям решать сложные, нелинейные задачи, такие как распознавание изображений и обработка естественного языка.	15
33	Наиболее популярные активационные функции включают:	15
34	1. ReLU (Rectified Linear Unit): Возвращает входное значение, если оно больше нуля, и ноль в противном случае.	15
35	2. Sigmoid: Ограничивает выходное значение в диапазоне от 0 до 1, что делает её полезной для задач классификации.	15
36	Одним из ключевых алгоритмов в обучении нейронных сетей является backpropagation (обратное распространение ошибки). Этот алгоритм используется для минимизации ошибки сети путем корректировки весов связей между нейронами.	16
37	Процесс обратного распространения ошибки включает несколько этапов:	16
38	1. Прямое распространение: Входные данные проходят сквозь сеть, и вычисляется предсказание.	16
39	Для разработки и обучения нейронных сетей существует множество фреймворков. Некоторые из наиболее популярных включают:	17
40	1. TensorFlow: Созданный Google, этот фреймворк широко используется для машинного обучения и нейронных сетей благодаря своей гибкости и масштабируемости.\r\n2. PyTorch: Популярный в научном сообществе инструмент, разработанный Facebook, известный своей простотой и возможностями динамического построения вычислительных графов.\r\n3. Keras: Высокоуровневый API для нейронных сетей, работающий поверх TensorFlow, который позволяет быстро прототипировать модели.	17
41	Эти фреймворки предоставляют мощные инструменты для создания, обучения и развертывания нейронных сетей, поддерживая выполнение задач на различных аппаратных платформах, включая GPU и TPU.	17
42	Однако есть и множество других инструментов и библиотек, которые НЕ используются для создания нейронных сетей, так как они предназначены для других целей. Примером может быть Pandas — библиотека Python для анализа и манипулирования данными, которая не предназначена для создания и обучения нейронных сетей.	17
53	3. Tanh (гиперболический тангенс): Преобразует значения в диапазон от -1 до 1, что позволяет обрабатывать данные с отрицательными и положительными значениями.	15
54	Эти функции добавляют нелинейность в модель, что позволяет нейронным сетям обучаться более сложным шаблонам и зависимостям.	15
55	2. Вычисление ошибки: Рассчитывается разница между предсказанным значением и истинным значением (ошибка).	16
56	3. Обратное распространение: Ошибка распространяется обратно через сеть, и вычисляются градиенты функции потерь по отношению к весам.	16
57	4. Обновление весов: Веса корректируются с учетом вычисленных градиентов с использованием метода градиентного спуска или его вариаций.	16
58	Этот итеративный процесс повторяется до тех пор, пока ошибка не станет минимальной, что позволяет нейронной сети улучшать свои предсказания.	16
59	Основные этапы нейросетевого моделирования:	14
60	1. Определение архитектуры сети:\r\n   - Включает выбор типа нейронной сети (например, многослойный персептрон, рекуррентная нейронная сеть, свёрточная нейронная сеть).\r\n   - Определение числа слоев и количества нейронов в каждом слое.\r\n   - Выбор активационных функций для каждого слоя (например, ReLU, сигмоида, гиперболический тангенс).	14
61	2. Подготовка данных:\r\n   - Сбор и предварительная обработка данных (нормализация, масштабирование, обработка пропущенных значений).\r\n   - Разделение данных на обучающую, валидационную и тестовую выборки.	14
62	3. Инициализация параметров:\r\n   - Установка начальных весов и смещений в сети. Инициализация может производиться случайно или с использованием более сложных алгоритмов (например, инициализация по методу Хе или Ксавье).	14
63	4. Обучение модели:\r\n   - Процесс обучения включает подачу входных данных и соответствующих им меток (истинные значения) в сеть, вычисление и минимизацию функции ошибки (например, ошибка среднеквадратичная, кросс-энтропия).\r\n   - Применение алгоритма обратного распространения ошибки (backpropagation) для корректировки весов и оптимизаторов (например, градиентный спуск, Adam).	14
64	5. Оценка и валидация модели:\r\n   - Оценка производительности обученной модели на валидационной и тестовой выборках для предотвращения переобучения и проверки обобщающей способности сети.\r\n   - Использование метрик оценки (например, точность, F-меры, ROC-кривая).	14
65	6. Оптимизация и гиперпараметры:\r\n   - Настройка гиперпараметров (например, скорость обучения, размер мини-пакета, количество эпох) для улучшения качества модели.\r\n   - Применение техник регуляризации (например, Dropout, L2-регуляризация) для предотвращения переобучения.	14
66	7. Внедрение и использование модели:\r\n   - Развертывание модели в реальную эксплуатацию для принятия решений или оказания поддержки в различных приложениях (например, системы рекомендаций, распознавание изображений, обработка естественного языка).	14
67	8. Мониторинг и обновление:\r\n   - Постоянный мониторинг производительности модели в реальных условиях.\r\n   - Обновление или переобучение модели на новых данных для поддержания её точности и релевантности.	14
68	Mathcad — это программное обеспечение, разработанное компанией PTC, предназначенное для выполнения инженерных и научных расчетов, анализа данных, а также документирования результатов. Оно используется как профессиональными инженерами и исследователями, так и студентами, для решения различных математических, физических и инженерных задач. Основные особенности Mathcad включают:	19
69	Интерфейс	19
70	Mathcad предлагает интуитивно понятный интерфейс с возможностью комбинирования текста, математических выражений и данных в одном документе. Это позволяет пользователям легко документировать свои расчеты и аннотировать их для дальнейшего использования или передачи коллегам.	19
71	Возможности	19
72	1. Символьные и численные расчеты: Mathcad поддерживает широкий спектр математических операций, включая алгебраические упрощения, интегралы, производные, линейную алгебру и многое другое.\r\n2. Итерационные и условные выражения: Пользователи могут создавать сложные алгоритмы с использованием циклов и условий.\r\n3. Графическое представление данных: Mathcad позволяет создавать различные типы графиков и диаграмм для визуализации данных и результатов.\r\n4. Поддержка единиц измерений: Программа автоматически отслеживает и учитывает единицы измерений, что важно для точных инженерных расчетов.\r\n5. Интеграция с другими инструментами: Mathcad может интегрироваться с другими инженерными и математическими программами, такими как MATLAB, Excel, и CAD-системы.	19
73	Использование	19
74	1. Инженерия: Mathcad часто используется для проектирования и анализа систем, выполнения термодинамических расчетов, электронных схем и др.\r\n2. Образование: Программа является полезным инструментом для преподавания математики и инженерных дисциплин, так как позволяет легко демонстрировать математические концепции и методы.\r\n3. Научные исследования: Mathcad используется для моделирования физических явлений, анализа данных экспериментов и других исследовательских задач.	19
76	Преимущества	19
77	1. Интерактивность: Пользователь может мгновенно видеть результаты изменений в формулах и данных.\r\n2. Документирование и отчетность: Mathcad позволяет автоматически документировать процесс расчета, что упрощает проверку результатов и создание отчетов.\r\n3. Простота использования: Интуитивно понятный интерфейс и широкие возможности делают программное обеспечение удобным для использования как новичками, так и опытными специалистами.	19
78	Чтобы создать 2D график в MathCad, используется специальная функция графика. Для построения графика необходимо определить оси и задать функцию, которая будет отображаться на графике. Вы можете создать как простейший график линейной зависимости, так и более сложные графики с несколькими функциями и параметрами.	21
79	MathCad позволяет экспортировать графики в различные форматы для дальнейшего использования или представления данных. Среди популярных форматов экспорта можно выделить:	23
80	- PDF: Формат документа, удобный для печати и обмена.	23
81	- JPEG: Изображение, подходящее для вставки в презентации и документы.	23
82	- PNG: Графический формат с поддержкой прозрачности, часто используемый на веб-сайтах.	23
83	- BMP: Стандартный формат растрового изображения.	23
84	- SVG: Векторный графический формат, удобный для масштабируемости и редактирования.	23
85	Параметр Trace в MathCad относится к компоненту графика и определяет отображение конкретной функции или набора данных на графике. Это один из ключевых параметров, который позволяет управлять тем, как будет отображаться кривая или множество точек на графике.	24
86	Параметр Trace может включать следующие настройки:	24
87	- Цвет кривой: Выбор цвета для отображаемой функции или точки.	24
88	- Тип линии: Определение стиля линии (сплошная, пунктирная и т.д.).	24
89	- Маркеры точек: Определение формы и стиля маркеров для точек данных.	24
90	- Легенда: Добавление описания к кривой или набору данных для удобства интерпретации графика.	24
91	Для вывода 3D-графики в MathCad используется специализированный метод визуализации данных. Этот метод позволяет построить объемные графики, которые помогают более наглядно представить сложные зависимости и функции. Выбор этого метода позволяет создавать поверхность, по которой можно определить поведение функции в трех измерениях: оси X, Y и Z.	22
92	MathCad предоставляет богатый набор инструментов для построения разнообразных графиков. Среди основных типов графиков, которые можно построить:	20
93	- 2D-графики: Линейные графики, гистограммы, круговые диаграммы и другие типы плоских графиков.	20
94	- 3D-графики: Поверхностные графики, графики сечений и объемные диаграммы.	20
95	- Полярные графики: Графики, представляющие данные в полярных координатах.	20
96	- Векторные графики: Графики, использующие векторные поля для представления данных.	20
97	- Диаграммы рассеяния: Графики, представленные с разбросом точек, позволяющие визуализировать корреляции и связи между переменными.	20
98	Функция MathFormat в MathCad играет важную роль в форматировании математических выражений. С ее помощью пользователи могут изменять стиль и внешний вид математических данных, чтобы они соответствовали требуемому формату. MathFormat позволяет настраивать следующие аспекты:	25
99	- Шрифты и размеры: Изменение типа и размера шрифта для различных частей уравнений.	25
100	- Выравнивание: Определение выравнивания выражений для улучшения читаемости.	25
101	- Стиль и формат: Настройка стилей (жирный, курсив и т.д.) и форматирование различных математических символов и операторов.	25
102	Для улучшения визуального восприятия графиков в MathCad, пользователи могут задавать различные цвета для линий графиков. Это делает графики более понятными и отличимыми друг от друга, особенно когда на одном рисунке отображаются несколько функций. В MathCad процесс задания цвета линии достаточно интуитивен и выполняется через свойства графика, где существует возможность выбора любого цвета для линии.	26
103	Легенда помогает идентифицировать различные элементы на графике, такие как линии, точки или области. В MathCad можно легко добавить легенду к графику, чтобы улучшить его читаемость и обеспечить четкое понимание, какие данные или функции представлены. Легенда может быть настроена и отображаться в любом месте по желанию пользователя.	27
104	Контурные графики — это полезный инструмент для представления трехмерных данных в двух измерениях при помощи линий одинакового значения. В MathCad есть возможность строить такие контурные графики, что позволяет анализировать структурные особенности функции и выявлять области с одинаковыми значениями определенной переменной.	28
105	Для более качественного анализа данных и лучшего представления графиков, иногда необходимо задать конкретные границы вертикальной оси (ось Y). В MathCad это можно сделать с помощью специальной команды, которая позволяет установить нижнюю и верхнюю границы вертикальной оси. При этом пользователь может точно настроить диапазон значений, что более удобно для представления данных в нужном масштабе и исключения лишней информации.	29
106	Знания о предметной области (domain knowledge) представляют собой совокупность информации и фактов, относящихся к конкретной области или дисциплине. Эти знания включают основные концепции, термины, теории, законы и правила, характерные для данной области. Они являются фундаментом для понимания специфики предметной области и служат базой для последующих этапов анализа и формирования решений.	30
107	Примеры знаний о предметной области в различных дисциплинах:	30
108	- Физика: законы Ньютона, теории гравитации.	30
109	- Медицина: анатомия человека, симптомы и методы диагностики заболеваний.	30
110	- Машиностроение: типы материалов, стандарты проектирования.	30
111	Знания о методах решения задач (problem-solving knowledge) включают методики, стратегии и подходы, используемые для нахождения решений конкретных проблем или задач в определенной области. Эти знания формируются на основе опыта, исследований и лучших практик, и включают алгоритмы, эвристики, процедурные шаги и так далее.	31
112	Примеры знаний о методах решения задач:	31
113	- Математика: методы численного интегрирования, алгоритмы оптимизации.	31
114	- Программирование: подходы к отладке и тестированию программного обеспечения.	31
115	- Бизнес: способы анализа рынка, стратегии маркетинговых кампаний.	31
116	Знания об операционной среде (operational environment knowledge) включают информацию о внешних и внутренних условиях, в которых осуществляется деятельность или принимаются решения. Эти знания отражают понимание ресурсов, ограничений, обстановки, инструментов и технологий, доступных для выполнения задач и достижения целей.	32
117	Примеры знаний об операционной среде:	32
118	- Компьютерные системы: операционные системы, сетевые протоколы, аппаратные средства.	32
119	- Управление проектами: проектные сроки, бюджет, ресурсы команды.	32
120	- Экономика: рыночные условия, регуляторная среда, экономические тренды.	32
121	Знания о свойствах знаний, или метазнания, представляют собой информацию, которая описывает или анализирует сами знания. Это своего рода знания о знаниях. Метазнания позволяют системе ИИ или человеку оценивать, классифицировать и управлять знаниями более эффективно. Примеры метазнаний включают информацию о:	33
122	1. Качестве знаний – насколько надежны и точны данные.	33
123	2. Источниках знаний – откуда получены данные и насколько авторитетен источник.	33
124	3. Актуальности знаний – насколько свежа и актуальна информация.	33
125	4. Применимости знаний – в каких контекстах и задачах можно применить данные знания.	33
126	5. Связях между знаниями – как различные знания взаимосвязаны и влияют друг на друга.	33
127	Базы знаний в контексте искусственного интеллекта – это организованные хранилища информации, которая используется для принятия решений, вывода или обучения. В классической интерпретации базы знаний строятся на основе структурированных данных и подходов к их организации. В рамках нисходящего подхода используются следующие ключевые принципы:	34
128	1. Структурированные представления – информация организована в виде четко определенных структур, таких как:	34
129	- Правила – условные утверждения вида если..., то..., используемые для логического вывода.	34
130	- Факты – конкретные данные или утверждения о мире.	34
131	- Понятийные схемы (фреймы) – иерархические структуры, описывающие объекты, их свойства и взаимоотношения.	34
132	- Логические модели – выражения на формальном языке, описывающие знания через логические конструкции.	34
133	2. Декларативный подход – знания описываются декларативно, то есть указываются факты и правила, которые система должна учитывать, а не процедурные инструкции для выполнения.	34
134	3. Алгоритмы вывода – методы, которые позволяют использовать базу знаний для принятия решений:	34
135	- Монотонные логические выводы – классические логические схемы без учета новых фактов.	34
136	- Немонатонные логические выводы – схемы, которые могут пересматривать прежние выводы при появлении новых фактов.	34
137	4. Нисходящий подход (Top-Down Approach) – процесс построения базы знаний начинается с высокого уровня абстракции и постепенно детализируется. Это подразумевает:	34
138	- Идентификацию общих понятий и принципов.	34
139	- Постепенную детализацию этих понятий путем добавления более специфичных элементов и правил.	34
140	Разные формы представления баз знаний имеют свои особенности, которые делают их подходящими для различных задач. Рассмотрим несколько основных форм представления знаний:	35
141	1. Правила и продукционные системы	35
142	2. Факты и декларативные знания	35
143	3. Фреймы	35
144	4. Семантические сети	35
145	5. Онтологии	35
146	6. Сценарии (ситуационные модели)	35
147	Правила и продукционные системы представляют собой знания в виде логических утверждений типа если..., то.... Эти системы позволяют легко добавлять новые правила и изменять существующие, что делает их весьма гибкими.	36
148	- Преимущества:	36
149	- Высокая степень модифицируемости и расширяемости.	36
150	- Могут легко интегрироваться с новыми знаниями.	36
151	- Недостатки:	36
152	- Менее подходят для описания сложных ситуаций и контекстов, так как они ориентированы на простые условные операции.	36
153	Факты и декларативные знания часто используются в реляционных базах данных и состоят из утверждений о предметах и их свойствах.	37
154	- Преимущества:	37
155	- Простота в представлении и внесении базовых изменений.	37
156	- Недостатки:	37
157	- Ограниченная гибкость для сложных и динамичных приложений.	37
158	Фреймы это структура, которая описывает объекты и их атрибуты (свойства) в виде слотов. Это мощный инструмент для моделирования объектов и их взаимосвязей.	38
160	- Преимущества:	38
161	- Хорошо подходят для иерархического представления знаний.	38
162	- Фреймы хорошо применимы для ситуационного описания, так как они гибко описывают объекты и контексты.	38
163	- Недостатки:	38
164	- Сложность в реализации некоторых типов взаимодействий между объектами.	38
165	Семантические сети представляют знания в виде графа, где узлы соответствуют понятиям или сущностям, а ребра – отношениям между ними.	39
166	- Преимущества:	39
167	- Наиболее визуально интуитивное представление.	39
168	- Могут быть хорошо приспособлены для описания ситуаций и контекстов.	39
169	- Недостатки:	39
170	- Менее удобны для динамической модификации и расширения.	39
171	Онтологии описывают и классифицируют сущности и их взаимосвязи в областях знаний, используя формальные описания.	40
172	- Преимущества:	40
173	- Поддержка общих стандартов и совместимости.	40
174	- Хорошо подходят для структурированной информации и сложных реляционных данных.	40
175	- Недостатки:	40
176	- Могут быть сложными для динамического изменения и расширения.	40
177	Сценарии используются для описания последовательности действий или событий и часто применяются для моделирования конкретных ситуаций.	41
178	- Преимущества:	41
179	- Идеальны для ситуационного описания.	41
180	- Легко понимаются человеком.	41
181	- Недостатки:	41
182	- Меньше возможностей для модификации и расширения ввиду их специфичности.	41
183	База знаний по схеме Поспелова — это структурированная модель, включающая факты, правила, аксиомы, метапредикаты, частные и общие случаи для представления и организации знаний в интеллектуальных системах.	42
184	DOM (Document Object Model) — это программный интерфейс для HTML и XML документов. Он представляет собой структуру документа в виде дерева, где каждый элемент является объектом. DOM позволяет скриптам динамически изменять содержание, структуру и стиль веб-страниц. С помощью DOM разработчики могут добавлять, удалять или изменять элементы и атрибуты страницы, реагируя на действия пользователя.	43
185	Для стилизации веб-страниц чаще всего используется язык CSS (Cascading Style Sheets). CSS позволяет определять, как элементы HTML отображаются на экране, на бумаге или в других медиа. Он управляет визуальными и стилистическими аспектами, такими как цвета, шрифты, отступы, выравнивание и многие другие. Существуют другие языки для стилизации, но CSS является основным и самым распространённым.	44
186	Для передачи данных между клиентом и сервером в веб-приложениях обычно используется протокол HTTP (Hypertext Transfer Protocol). HTTP является базовым протоколом для работы в интернете, который обеспечивает установление соединения и обмен данными в виде гипертекстовых документов и других типов контента. Существует также защищённая версия этого протокола — HTTPS, которая шифрует данные для повышения безопасности. Другие протоколы, такие как WebSocket и FTP, также могут использоваться, но HTTP остается наиболее распространённым для большинства веб-приложений.	45
187	AJAX (Asynchronous JavaScript and XML) — это набор технологий, который позволяет веб-странице взаимодействовать с сервером асинхронно, без необходимости перезагружать всю страницу. С помощью AJAX можно загружать данные в фоновом режиме и обновлять отдельные части веб-страницы. Это делает веб-приложения более интерактивными и быстрее реагирующими на действия пользователя. AJAX обычно использует объекты XMLHttpRequest или современные методы, такие как fetch, для выполнения HTTP-запросов к серверу и обработки ответов.	46
188	Для создания гиперссылки на веб-странице в HTML используется тег <a>. Этот тег называется anchor и применяется для создания ссылок на другие документы или ресурсы. Атрибут href указывает URL, на который следует перейти при щелчке на гиперссылку. Например, <a href=https://www.example.com>Посетить Example</a> создает ссылку на страницу www.example.com.	47
189	В JavaScript для отправки HTTP-запросов чаще всего используется метод XMLHttpRequest или fetch(). Метод XMLHttpRequest — это старый способ, предоставляющий клиенту API для обмена данными между клиентом и сервером. Он позволяет выполнять запросы, обрабатывать ответы и загружать данные асинхронно. Однако, в последнее время всё чаще используется метод fetch(), который обеспечивает более удобный и современный способ работы с HTTP-запросами и поддерживает обещания, что упрощает работу с асинхронными операциями.	48
190	В JavaScript глобальный объект называется window. Этот объект является корневым и предоставляет доступ ко всем методам, свойствам и объектам, доступным в контексте браузера. Например, он включает такие методы и свойства, как alert(), setTimeout(), document, и многое другое. window автоматически создается при загрузке веб-страницы и доступен везде в скрипте. В узком кругу среды выполнения этот объект может иметь другие имена, такие как globalThis, который обеспечивает более универсальный доступ к глобальному объекту в различных окружениях, включая браузеры и Node.js.	49
191	React — это библиотека JavaScript, разработанная для создания пользовательских интерфейсов, в первую очередь для одностраничных приложений (SPA). Основная роль React заключается в упрощении процесса разработки динамичных и отзывчивых пользовательских интерфейсов. Она позволяет разработчикам создавать компоненты, которые могут легко обновляться и повторно использоваться. React использует виртуальный DOM (Document Object Model) для минимизации изменений в реальном DOM, что повышает производительность и скорость приложений.	50
192	Компонент в React — это независимая и многократно используемая часть пользовательского интерфейса. Компоненты могут быть простыми, как кнопка, или сложными, как целый формуляр или модальное окно. Они могут содержать в себе и логику, и представление, что делает их очень гибкими и мощными. Основная идея компонентов — это возможность их многократного использования и вложенности, что значительно упрощает структуру и управление кодом приложения.	51
193	Webpack — это популярный модульный бандлер для JavaScript-приложений. Он используется для сборки модулей с различными зависимостями в единый или несколько пакетов, которые потом можно подключить к веб-странице. Webpack обрабатывает не только JavaScript, но и другие типы файлов, такие как CSS, изображения, шрифты и многое другое, благодаря использованию loaders и plugins. Основные функции Webpack включают код-сплиттинг (разделение кода), треш-шейкинг (удаление неиспользуемого кода) и поддержку горячей загрузки модулей (HMR), что значительно упрощает процесс разработки и обслуживания приложений.	52
194	Тестирование ПО — это процесс оценки и проверки качества программного обеспечения с целью найти и исправить дефекты, ошибки или недочеты перед выпуском продукта в эксплуатацию. Тестирование помогает гарантировать, что приложение работает правильно, соответствует требованиям и удовлетворяет потребностям пользователей. В процессе тестирования проверяются различные аспекты, такие как функциональность, производительность, безопасность и совместимость программного обеспечения.	53
195	Тестирование без выполнения кода называется статическим тестированием. Оно включает в себя анализ, ревизию и проверку документации, требований и исходного кода без непосредственного запуска программного обеспечения. Примеры статического тестирования включают ручной анализ кода, ревизии, инспекции и использование автоматизированных инструментов, таких как линтеры и статические анализаторы кода.	54
196	Тестирование совместимости направлено на проверку того, как программное обеспечение взаимодействует с различными операционными системами, браузерами, устройствами и другими программными продуктами. Цель этого типа тестирования — убедиться, что приложение корректно работает в различных средах и с разными конфигурациями оборудования и программного обеспечения. Проводя тестирование совместимости, тестировщики могут выявить и устранить возможные проблемы, связанные с интеграцией и использование продукта в реальных условиях.	55
197	Динамическое тестирование представляет собой процесс проверки корректности работы системы путем выполнения заранее подготовленных тестов, основанных на спецификациях и требованиях к программному обеспечению. Этот вид тестирования проводится путем запуска приложения и проверки его поведения на соответствие ожидаемому результату. Динамическое тестирование включает в себя различные виды тестов, такие как функциональное тестирование, регрессионное тестирование, нагрузочное тестирование и другие, которые проверяют работу программы в реальных условиях.	56
198	Для автоматического функционального тестирования веб-приложений существует множество инструментов, которые помогают упростить и ускорить процесс тестирования. Одним из наиболее популярных инструментов для этой задачи является Selenium. Selenium позволяет автоматизировать взаимодействие с веб-страницами, проверять их функциональность и выполнять сценарии тестирования для различных браузеров и платформ. Этот инструмент поддерживает различные языки программирования, такие как Java, C#, Python и другие, что делает его универсальным и удобным для использования в различных средах разработки.	57
199	Тестирование черного ящика — это метод тестирования программного обеспечения, при котором тестировщик не имеет доступа к внутренней структуре или коду приложения. Тестировщик взаимодействует с программным обеспечением, как пользователь, и тестирует его функциональность на основе входных данных и ожидаемых выходных результатов. Цель тестирования черного ящика — проверить, что приложение выполняет заданные функции корректно, не вдаваясь в подробности его внутренней реализации.	58
200	Интеграционное тестирование направлено на проверку взаимодействия между различными компонентами системы. Этот вид тестирования проводится после того, как отдельные модули или компоненты прошли модульное тестирование. Интеграционное тестирование проверяет корректность работы системы при взаимодействии ее частей, обнаруживает ошибки на стыке модулей и гарантирует, что все компоненты работают вместе согласно требованиям. Это обеспечивает целостность и совместимость системы как единого целого.	59
201	Нагрузочное тестирование — это тип тестирования, при котором проверяется работоспособность системы под высокими нагрузками. Целью этого тестирования является определить, как система справляется с большим количеством пользователей или запросов, оценить её производительность и выявить возможные узкие места. Нагрузочное тестирование помогает предсказать поведение системы в условиях интенсивной эксплуатации и гарантировать её надежность и стабильность под ожидаемой нагрузкой. Часто используется для веб-приложений, чтобы оценить их производительность при пиковых нагрузках.	60
202	Тестовый сценарий (Test Case) — это документ, который описывает набор действий, условий и ожидаемых результатов для определения соответствия программного продукта требованиям. Каждый тестовый сценарий содержит подробное описание шагов, которые необходимо выполнить для тестирования конкретного функционала системы, а также критерии успешного прохождения теста. Этот документ служит основой для проверки правильности работы программного обеспечения и позволяет тестировщикам систематически проверять функциональность продукта.	61
203	Регрессионное тестирование — это тип тестирования, направленный на проверку того, что исправления багов или изменения в коде не привели к появлению новых ошибок. Основная цель регрессионного тестирования — убедиться, что ранее работавший функционал не нарушен из-за внесённых изменений. Регрессионные тесты выполняются повторно на каждом этапе разработки после каждого изменения кода, чтобы гарантировать стабильность и целостность системы. Этот вид тестирования помогает минимизировать риски и снизить вероятность возникновения новых дефектов после исправления существующих.	62
\.


--
-- Data for Name: Courses_course; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Courses_course" (id, course_name, course_description, creation_date, image) FROM stdin;
1	Информационно-поисковые системы	Курс Информационно-поисковые системы посвящен изучению методов и технологий, используемых для эффективного поиска, анализа и управления информацией в больших объемах данных. Он охватывает основы работы поисковых систем, алгоритмы ранжирования, индексации и классификации данных, а также различные подходы к улучшению релевантности и эффективности поиска информации в цифровых средах.	2024-05-02 15:42:59.277986+03	courses_images/IPS.jpeg
3	Компьютерная графика	Курс Компьютерная графика охватывает принципы и методы создания, обработки и визуализации изображений с использованием компьютеров. Темы включают математические основы графики, алгоритмы рендеринга, моделирование трехмерных объектов, анимацию, текстуры и освещение, а также использование графических программных средств и инструментов. Этот курс направлен на развитие навыков и знаний, необходимых для разработки и реализации графических приложений и визуальных эффектов.	2024-05-05 23:02:36.408013+03	courses_images/Computer_graphics.jpeg
4	Основы теории интеллектуальных вычислительных сетей	Курс Основы теории интеллектуальных вычислительных сетей знакомит студентов с концепциями и методами разработки и анализа вычислительных сетей, способных к самообучению и адаптации. Темы курса включают архитектуры интеллектуальных сетей, алгоритмы машинного обучения и искусственного интеллекта, методы оптимизации и анализа данных, а также применение этих технологий в сетевых приложениях. Курс направлен на формирование понимания теоретических основ и практических навыков для создания адаптивных и эффективных вычислительных систем.	2024-05-11 22:02:58.365179+03	courses_images/OTIVS.jpeg
5	Разработка клиентских web-приложений	Курс Разработка клиентских web-приложений фокусируется на обучении студентов созданию интерактивных и динамичных веб-приложений, работающих на стороне клиента. Темы курса включают HTML, CSS, JavaScript, а также современные фреймворки и библиотеки, такие как React, Vue.js или Angular. Студенты изучают принципы построения пользовательских интерфейсов, управление состоянием приложения, взаимодействие с сервером через API, а также методы тестирования и оптимизации производительности. Курс направлен на формирование навыков, необходимых для разработки и поддержания профессиональных и эффективных клиентских web-приложений.	2024-05-11 22:03:16.188023+03	courses_images/WEB.jpeg
6	Тестирование программного обеспечения (ПО)	Курс Тестирование ПО предназначен для обучения студентов методам и инструментам обеспечения качества программного обеспечения. В ходе курса рассматриваются ключевые аспекты тестирования: виды тестирования (функциональное, не функциональное, автоматизированное, ручное), разработка тестовой документации (тест-кейсы, тест-планы, отчеты о дефектах), методы тест-дизайна, а также использование популярных инструментов для управления тестированием и автоматизации процессов (например, Selenium, JUnit, TestNG). Студенты изучают основы жизненного цикла тестирования, техники анализа и отчетности, навыки работы в Agile/Scrum и других методологиях разработки ПО. Курс вооружает участников необходимыми знаниями и практическими навыками для эффективного выявления и устранения дефектов, что способствует повышению качества конечного продукта.	2024-05-11 22:03:28.71219+03	courses_images/Software_Testing.jpeg
\.


--
-- Data for Name: CustomUsers_customuser; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."CustomUsers_customuser" (id, password, last_login, is_superuser, username, email, is_staff, is_active, date_joined, first_name, last_name, educational_subject, is_teacher) FROM stdin;
2	pbkdf2_sha256$720000$myMjwyhJgi6x72Jt6U4mur$9gJJcW0bvYa5fSBDiJIUXyCJq+Sk/8c3iRqCfE5VowM=	2024-05-21 14:52:24+03	t	admin		t	t	2024-04-26 22:15:08+03	admin	admin		f
10	pbkdf2_sha256$720000$bzzoY1ynWyGxz3xlGbyjWN$DUxG8UPOzIlucRZ0Ful/5ZPozLuUzC4aJG0GPHVpGEY=	2024-05-04 21:54:09+03	f	Hope		f	t	2024-04-27 14:07:13+03	Глеб	Жеглов		f
9	pbkdf2_sha256$720000$DXeLc0BhQtltTRXwCaIAtQ$WV4FxcmcKCwAgRkREbzx6Gr0so+5d1yrxad/8OaMZfc=	\N	f	Hopeless		f	t	2024-04-27 14:01:16+03	Глеб	Жеглов		f
\.


--
-- Data for Name: CustomUsers_customuser_course_id; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."CustomUsers_customuser_course_id" (id, customuser_id, course_id) FROM stdin;
2	10	1
7	10	3
10	9	1
18	10	4
19	10	5
21	10	6
\.


--
-- Data for Name: CustomUsers_customuser_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."CustomUsers_customuser_groups" (id, customuser_id, group_id) FROM stdin;
\.


--
-- Data for Name: CustomUsers_customuser_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."CustomUsers_customuser_user_permissions" (id, customuser_id, permission_id) FROM stdin;
\.


--
-- Data for Name: Options_option; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Options_option" (id, option_text, question_id_id, "isCorrect") FROM stdin;
42	a) Технология для создания веб-приложений	12	f
43	b) Процесс извлечения данных с веб-сайтов	12	t
44	c) Метод создания пользовательских интерфейсов	12	f
45	d) Процесс хостинга веб-сайтов	12	f
46	BeautifulSoup	13	t
47	a) select()	14	f
48	b) findall()	14	f
49	c) getelementbyid()	14	f
50	d) find()	14	t
51	a) Content-Type	15	f
52	b) User-Agent	15	t
53	c) Accept-Language	15	f
54	d) Cache-Control	15	f
55	a) K-Means	16	f
56	b) Principal Component Analysis (PCA)	16	f
57	c) Latent Dirichlet Allocation (LDA)	16	t
58	d) Linear Regression	16	f
59	Gensim	17	t
60	a) Для улучшения визуализации текста	18	f
61	b) Для исключения часто встречающихся слов, которые не несут значимой информации о теме	18	t
62	c) Для ускорения работы алгоритма	18	f
63	d) Для сокращения длины текста	18	f
64	a) Активирующий слой	19	t
65	b) Линейный слой	19	f
66	c) Регрессионный слой	19	f
67	d) Сигмальный слой	19	f
68	a) Процесс предсказания новых данных на основе обученной нейронной сети	20	f
69	b) Процесс обновления весов нейронной сети на основе ошибки предсказания	20	t
70	c) Алгоритм классификации данных	20	f
71	d) Метрика для оценки качества модели	20	f
73	plot2d	22	t
74	a) .bmp	23	f
75	b) .jpeg	23	f
76	c) .png	23	f
77	d) Все выше перечисленные	23	t
78	a) Цвет трассы	24	f
79	b) Тип линии	24	f
80	c) Параметр для включения/выключения трассировки	24	t
81	d) Настройка оси	24	f
82	surf	25	t
83	a) Линейные и полярные	26	f
84	b) 2D и 3D	26	f
85	c) Столбчатые	26	f
86	d) Все вышеперечисленные	26	t
87	a) Изменяет числовой формат отображения	27	t
88	b) Форматирует графики	27	f
89	c) Устанавливает стиль текстов	27	f
90	d) Определяет цветовые схемы	27	f
91	a) color(line)	29	f
92	b) linestyle	28	f
93	c) color	28	f
94	d) linecolor	28	t
95	a) Невозможно	29	f
96	b) Используя функцию addLegend	29	f
97	c) В настройках графического компонента	29	t
98	d) Добавить текст вручную	29	f
99	a) Да	30	t
100	b) Нет	30	f
101	c) Только с дополнительными модулями	30	f
102	d) Только для 2D	30	f
103	ylimits	31	t
104	фрейм — способ представления знаний в ИИ, представляющий структуру данных для представления стереотипной ситуации	41	t
105	фрейм – это  категория, которая применяется только в сетях передачи данных и используется для описания единицы трафика	41	f
106	в широком смысле — знание о знании и о возможностях работы со знанием	40	t
107	знания о данных и способах их получения	40	f
108	БЗ обеспечивает хранение и доступ к различным видам знаний, используемым интеллектуальной автоматизированной системой (ИАС) при ее функционировании	39	t
109	это продукционная модель некоторой предметной области	39	f
110	сети фреймов	38	t
111	семантические сети	38	f
112	продукционные системы	38	f
113	сети фреймов	37	f
114	семантические сети	37	f
115	продукционные системы	37	t
116	продукционных  систем	36	f
117	продукционных  систем, системы фреймов	36	f
118	продукционных  систем , системы фреймов, семантических сетей	36	t
119	продукционных  систем, системы фреймов, семантических сетей и нейронных сетей	36	f
120	Метазнания	35	t
121	интерфейсные	34	f
122	проблемные	34	f
123	процедурные	34	f
124	структурные	34	t
125	метазнания	34	f
126	Процедурные	33	t
127	интерфейсные	32	f
128	проблемные	32	t
129	процедурные	32	f
130	структурные	32	f
131	метазнания	32	f
132	A. Документ с описанием методов	42	f
133	B. Модель объектных данных	42	f
134	C. Документ объектной модели	42	f
135	D. Документ объектной модели	42	t
136	CSS	43	t
137	HTML	44	t
138	A. Язык программирования	45	f
139	B. Метод асинхронной передачи данных	45	t
140	C. Библиотека JavaScript	45	f
141	D. Вид кеширования	45	f
142	A. <h1>	46	f
143	B. <link>	46	f
144	C. <a>	46	t
145	D. <href>	46	f
146	A. document.querySelector()	47	f
147	B. fetch()	47	t
148	C. getElementById()	47	f
149	D. alert()	47	f
150	A. document	48	f
151	B. window	48	t
152	C. navigator	48	f
153	D. localStorage	48	f
154	A. Обеспечивает стилизацию страниц	49	f
155	B. Управляет базами данных	49	f
156	C. Позволяет создавать интерфейсы пользователей	49	t
157	D. Обеспечивает работу с веб-сокетами	49	f
159	A. Библиотека для работы с DOM	50	f
160	B. Независимая, повторно используемая часть кода, представляющая часть пользовательского интерфейса	50	t
161	C. Инструмент для выполнения сетевых запросов	50	f
162	D. Система управления библиотеками	50	f
163	A. Система управления базами данных	51	f
164	B. Язык программирования	51	f
165	C. Модульный пакер для JavaScript приложений	51	t
166	D. Фреймворк для серверной разработки	51	f
167	A. Процесс разработки программного обеспечения	52	f
168	B. Процесс проверки функциональности аппаратного обеспечения	52	f
169	C. Процесс оценки качества программного обеспечения	52	t
170	D. Процесс реализации программного кода	52	f
171	A. Динамическое тестирование	53	f
172	B. Статическое тестирование	53	t
173	C. Регрессионное тестирование	53	f
174	D. Интеграционное тестирование	53	f
175	A. Тестирование безопасности	54	f
176	B. Тестирование производительности	54	f
177	C. Тестирование совместимости	54	t
178	D. Тестирование юзабилити	54	f
179	Валидация	55	t
180	A. Selenium	56	t
181	B. JIRA	56	f
182	C. Jenkins	56	f
183	D. Git	56	f
184	A. Черное тестирование (Black box testing)	57	t
185	B. Белое тестирование (White box testing)	57	f
186	C. Серое тестирование (Gray box testing)	57	f
187	D. Сквозное тестирование (End-to-End testing)	57	f
188	A. Модульное тестирование	58	f
189	B. Интеграционное тестирование	58	t
190	C. Системное тестирование	58	f
191	D. Приемочное тестирование	58	f
192	A. Функциональное тестирование	59	f
193	B. Нагрузочное тестирование	59	t
194	C. Регрессионное тестирование	59	f
195	D. Юзабилити тестирование	59	f
196	A. Тест-план	60	f
197	B. Тест-кейс	60	t
198	C. Тест-матрица	60	f
199	D. Тест-отчет	60	f
200	A. Нагрузочное тестирование	61	f
201	B. Приемочное тестирование	61	f
202	C. Регрессионное тестирование	61	t
203	D. Альфа-тестирование	61	f
204	a) TensorFlow	21	f
205	b) PyTorch	21	f
206	c) Scikit-learn	21	f
207	d) MySQL	21	t
\.


--
-- Data for Name: Questions_question; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Questions_question" (id, question_text, test_id_id, question_type) FROM stdin;
12	Что такое web-scraping?	2	MC
13	Какая библиотека Python чаще всего используется для web-scraping?	2	OE
14	Какой метод BeautifulSoup используется для поиска элемента по его атрибуту id?	2	MC
15	Какой из следующих заголовков HTTP часто используется для маскировки web-scraper под обычный браузер?	2	MC
16	Какая из следующих моделей является наиболее распространенной для тематического моделирования?	2	MC
17	Какая библиотека Python широко используется для тематического моделирования?	2	OE
18	Зачем в тематическое моделирование вводятся стоп-слова?	2	MC
19	Какой из следующих слоев часто используется для нелинейного преобразования данных в нейронных сетях?	2	MC
20	Что такое backpropagation (обратное распространение ошибки)?	2	MC
21	Какой из следующих фреймворков НЕ используется для создания нейронных сетей?	2	MC
22	Какая функция используется для создания 2D графика в MathCad?	3	OE
23	Какой формат файла можно использовать для экспорта графика из MathCad?	3	MC
24	Что означает параметр Trace в компоненте графика MathCad?	3	MC
25	Каким методом выводится 3D-графика в MathCad?	3	OE
26	Какие типы графиков можно построить в MathCad?	3	MC
27	Что делает функция MathFormat в MathCad?	3	MC
28	Как задать цвет линии для графика в MathCad?	3	MC
29	Как можно добавить легенду к графику в MathCad?	3	MC
30	Может ли MathCad строить контурные графики?	3	MC
31	Какая команда используется для установки нижней и верхней границы вертикальной оси?	3	OE
32	Знания о предметной области (по Поспелову) это ?	4	MC
33	Знания о методах решения задач это ?	4	OE
34	Знания об операционной среде это ?	4	MC
35	Знания о свойствах знаний это ?	4	OE
36	В классической интерпретации, базы знаний, в рамках нисходящего подхода, строятся на основе ?	4	MC
37	Из форм представления баз знаний, в наибольшей степени, ориентированы на модификацию и расширение ?	4	MC
38	Из форм представления баз знаний, в наибольшей степени ориентированы на ситуационное описание ?	4	MC
39	База знаний (по схеме Поспелова) – это ?	4	MC
40	Оцените правильность высказывания:	4	MC
41	Оцените правильность высказывания:	4	MC
42	Что такое DOM?	5	MC
43	Какой из следующих языков используется для стилизации веб-страниц?	5	OE
44	Какой протокол обычно используется для передачи данных между клиентом и сервером в веб-приложениях?	5	OE
45	Что такое AJAX?	5	MC
46	Какой тег используется для создания гиперссылки в HTML?	5	MC
47	Какой метод в JavaScript используется для отправки HTTP-запроса?	5	MC
48	Как называется объект JavaScript, который является глобальным и предоставляет доступ к методам и свойствам браузера?	5	MC
49	Какую роль выполняет библиотека React в разработке клиентских веб-приложений?	5	MC
50	Что такое компонент в контексте React?	5	MC
51	Что такое webpack?	5	MC
52	Что такое тестирование ПО?	6	MC
53	Как называется тестирование без выполнения кода?	6	MC
54	Какой тип тестирования направлен на проверку совместимости программного обеспечения с различными операционными системами, браузерами и устройствами?	6	MC
55	Как называется процесс проверки корректности работы системы путем выполнения тестов, созданных на основе спецификаций?	6	OE
56	Какой из следующих инструментов используется для автоматического функционального тестирования веб-приложений?	6	MC
57	Как называется тестирование, при котором тестирующий не имеет доступа к внутренней структуре или коду приложения?	6	MC
58	Какой тип тестирования проводится для проверки взаимодействия между различными компонентами системы?	6	MC
59	Как называется тестирование, при котором проверяется работоспособность системы под высокими нагрузками?	6	MC
60	Какой документ описывает набор действий, условий и ожидаемых результатов для определения соответствия программного продукта требованиям?	6	MC
61	Какой тип тестирования направлен на проверку того, что исправления багов не привели к появлению новых ошибок?	6	MC
\.


--
-- Data for Name: Results_result; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Results_result" (id, score, test_id_id, date_completion) FROM stdin;
15	10	6	2024-05-17 22:07:50.572629+03
\.


--
-- Data for Name: Results_result_student_id; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Results_result_student_id" (id, result_id, customuser_id) FROM stdin;
15	15	10
\.


--
-- Data for Name: Testings_testing; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Testings_testing" (id, testing_name, creation_date, course_id_id) FROM stdin;
2	Информационно-поисковые системы: Итоговое тестирование	2024-05-16 22:46:34.02701+03	1
3	Компьютерная графика: Итоговое тестирование	2024-05-17 11:17:16.937117+03	3
4	Основы теории интеллектуальных вычислительных сетей: Итоговое тестирование	2024-05-17 12:12:08.134799+03	4
5	Разработка клиентских web-приложений: Итоговое тестирование	2024-05-17 12:56:22.275401+03	5
6	Тестирование программного обеспечения: Итоговое тестирование	2024-05-17 13:16:59.169103+03	6
\.


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2024-05-21 14:53:20.199912+03	2	admin	2	[{"changed": {"fields": ["\\u0418\\u043c\\u044f", "\\u0424\\u0430\\u043c\\u0438\\u043b\\u0438\\u044f", "Email address", "\\u041e\\u0431\\u0440\\u0430\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b\\u0439 \\u043f\\u0440\\u0435\\u0434\\u043c\\u0435\\u0442"]}}]	15	2
2	2024-05-21 14:53:29.579874+03	10	Hope	2	[{"changed": {"fields": ["Email address", "\\u041e\\u0431\\u0440\\u0430\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b\\u0439 \\u043f\\u0440\\u0435\\u0434\\u043c\\u0435\\u0442"]}}]	15	2
3	2024-05-21 14:53:34.93133+03	9	Hopeless	2	[{"changed": {"fields": ["Email address", "\\u041e\\u0431\\u0440\\u0430\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b\\u0439 \\u043f\\u0440\\u0435\\u0434\\u043c\\u0435\\u0442"]}}]	15	2
4	2024-05-21 14:53:40.846747+03	5	student	2	[{"changed": {"fields": ["Email address", "\\u041e\\u0431\\u0440\\u0430\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b\\u0439 \\u043f\\u0440\\u0435\\u0434\\u043c\\u0435\\u0442"]}}]	15	2
5	2024-05-21 14:53:45.558746+03	13	test	2	[{"changed": {"fields": ["Email address", "\\u041e\\u0431\\u0440\\u0430\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b\\u0439 \\u043f\\u0440\\u0435\\u0434\\u043c\\u0435\\u0442"]}}]	15	2
6	2024-05-21 14:53:51.004185+03	1	user1	2	[{"changed": {"fields": ["Email address", "\\u041e\\u0431\\u0440\\u0430\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u044b\\u0439 \\u043f\\u0440\\u0435\\u0434\\u043c\\u0435\\u0442"]}}]	15	2
7	2024-05-21 14:54:21.728644+03	5	student	3		15	2
8	2024-05-21 14:54:26.326026+03	13	test	3		15	2
9	2024-05-21 14:54:30.501236+03	1	user1	3		15	2
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
15	CustomUsers	customuser
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	Testings	0001_initial	2024-05-21 03:06:10.870477+03
2	Questions	0001_initial	2024-05-21 03:16:09.788585+03
3	Questions	0002_alter_question_test_id	2024-05-21 03:16:09.791974+03
4	Options	0001_initial	2024-05-21 03:16:09.937373+03
5	contenttypes	0001_initial	2024-05-21 03:16:10.009964+03
6	contenttypes	0002_remove_content_type_name	2024-05-21 03:16:10.044893+03
7	auth	0001_initial	2024-05-21 03:16:10.495923+03
8	auth	0002_alter_permission_name_max_length	2024-05-21 03:16:10.500917+03
9	auth	0003_alter_user_email_max_length	2024-05-21 03:16:10.505916+03
10	auth	0004_alter_user_username_opts	2024-05-21 03:16:10.510513+03
11	auth	0005_alter_user_last_login_null	2024-05-21 03:16:10.516519+03
12	auth	0006_require_contenttypes_0002	2024-05-21 03:16:10.518597+03
13	auth	0007_alter_validators_add_error_messages	2024-05-21 03:16:10.522593+03
14	auth	0008_alter_user_username_max_length	2024-05-21 03:16:10.527592+03
15	auth	0009_alter_user_last_name_max_length	2024-05-21 03:16:10.531597+03
16	auth	0010_alter_group_name_max_length	2024-05-21 03:16:10.538901+03
17	auth	0011_update_proxy_permissions	2024-05-21 03:16:10.544897+03
18	auth	0012_alter_user_first_name_max_length	2024-05-21 03:16:10.566955+03
19	CustomUsers	0001_initial	2024-05-21 03:16:10.989241+03
20	Answers	0001_initial	2024-05-21 03:16:11.035454+03
21	Answers	0002_initial	2024-05-21 03:16:11.289778+03
22	Courses	0001_initial	2024-05-21 03:16:11.372614+03
23	Chapters	0001_initial	2024-05-21 03:16:11.456369+03
24	Content	0001_initial	2024-05-21 03:16:11.598093+03
25	Content	0002_alter_content_content_text	2024-05-21 03:16:11.603093+03
26	Courses	0002_course_image	2024-05-21 03:16:11.612738+03
27	CustomUsers	0002_alter_customuser_first_name_and_more	2024-05-21 03:16:11.646181+03
28	CustomUsers	0003_alter_customuser_first_name_and_more	2024-05-21 03:16:11.66118+03
29	CustomUsers	0004_alter_customuser_options	2024-05-21 03:16:11.668907+03
30	CustomUsers	0005_alter_customuser_options	2024-05-21 03:16:11.674912+03
31	CustomUsers	0006_customuser_is_teacher	2024-05-21 03:16:11.682549+03
32	CustomUsers	0007_customuser_course_id	2024-05-21 03:16:11.902148+03
33	Options	0002_option_iscorrect	2024-05-21 03:16:11.90791+03
34	Questions	0003_question_question_type	2024-05-21 03:16:11.912489+03
35	Questions	0004_alter_question_question_type	2024-05-21 03:16:11.918487+03
36	Questions	0005_alter_question_question_type	2024-05-21 03:16:12.035066+03
37	Results	0001_initial	2024-05-21 03:16:12.277421+03
38	Results	0002_result_date_completion	2024-05-21 03:16:12.288627+03
39	Testings	0002_testing_course_id	2024-05-21 03:16:12.35189+03
40	admin	0001_initial	2024-05-21 03:16:12.52871+03
41	admin	0002_logentry_remove_auto_add	2024-05-21 03:16:12.539519+03
42	admin	0003_logentry_add_action_flag_choices	2024-05-21 03:16:12.559523+03
43	sessions	0001_initial	2024-05-21 03:16:12.712287+03
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
usrxftyu1so0vo3bnxtsm178d5bckcld	.eJxVjDEOwyAQBP9CHSEDZ3ykTO83WAd3Ck4ikIxdRfl7bMlF0myxM7tvNdG25mlrskwzq6uy6vLbRUpPKQfgB5V71amWdZmjPhR90qbHyvK6ne7fQaaW93VyPsEeZK0JPIghjAg-sPSBADEgRIPMkIZEUXrXQceBMTrvyLqgPl_gYzey:1s3biV:565FQHBWFz999_ptnFMQY--E5JF5m6ACbEYCq-JzgSs	2024-05-19 13:15:47.423504+03
\.


--
-- Name: Answers_answer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Answers_answer_id_seq"', 1, false);


--
-- Name: Answers_answer_student_id_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Answers_answer_student_id_id_seq"', 1, false);


--
-- Name: Chapters_chapter_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Chapters_chapter_id_seq"', 1, false);


--
-- Name: Content_content_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Content_content_id_seq"', 1, false);


--
-- Name: Courses_course_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Courses_course_id_seq"', 1, false);


--
-- Name: CustomUsers_customuser_course_id_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."CustomUsers_customuser_course_id_id_seq"', 12, true);


--
-- Name: CustomUsers_customuser_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."CustomUsers_customuser_groups_id_seq"', 1, false);


--
-- Name: CustomUsers_customuser_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."CustomUsers_customuser_id_seq"', 1, true);


--
-- Name: CustomUsers_customuser_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."CustomUsers_customuser_user_permissions_id_seq"', 1, false);


--
-- Name: Options_option_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Options_option_id_seq"', 1, false);


--
-- Name: Questions_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Questions_question_id_seq"', 1, false);


--
-- Name: Results_result_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Results_result_id_seq"', 1, false);


--
-- Name: Results_result_student_id_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Results_result_student_id_id_seq"', 2, true);


--
-- Name: Testings_testing_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Testings_testing_id_seq"', 1, false);


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 56, true);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 9, true);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 15, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 43, true);


--
-- Name: Answers_answer Answers_answer_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Answers_answer"
    ADD CONSTRAINT "Answers_answer_pkey" PRIMARY KEY (id);


--
-- Name: Answers_answer_student_id Answers_answer_student_id_answer_id_customuser_id_b6d35ec0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Answers_answer_student_id"
    ADD CONSTRAINT "Answers_answer_student_id_answer_id_customuser_id_b6d35ec0_uniq" UNIQUE (answer_id, customuser_id);


--
-- Name: Answers_answer_student_id Answers_answer_student_id_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Answers_answer_student_id"
    ADD CONSTRAINT "Answers_answer_student_id_pkey" PRIMARY KEY (id);


--
-- Name: Chapters_chapter Chapters_chapter_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Chapters_chapter"
    ADD CONSTRAINT "Chapters_chapter_pkey" PRIMARY KEY (id);


--
-- Name: Content_content Content_content_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Content_content"
    ADD CONSTRAINT "Content_content_pkey" PRIMARY KEY (id);


--
-- Name: Courses_course Courses_course_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Courses_course"
    ADD CONSTRAINT "Courses_course_pkey" PRIMARY KEY (id);


--
-- Name: CustomUsers_customuser_course_id CustomUsers_customuser_c_customuser_id_course_id_d63c24aa_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_course_id"
    ADD CONSTRAINT "CustomUsers_customuser_c_customuser_id_course_id_d63c24aa_uniq" UNIQUE (customuser_id, course_id);


--
-- Name: CustomUsers_customuser_course_id CustomUsers_customuser_course_id_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_course_id"
    ADD CONSTRAINT "CustomUsers_customuser_course_id_pkey" PRIMARY KEY (id);


--
-- Name: CustomUsers_customuser_groups CustomUsers_customuser_g_customuser_id_group_id_29c47ead_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_groups"
    ADD CONSTRAINT "CustomUsers_customuser_g_customuser_id_group_id_29c47ead_uniq" UNIQUE (customuser_id, group_id);


--
-- Name: CustomUsers_customuser_groups CustomUsers_customuser_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_groups"
    ADD CONSTRAINT "CustomUsers_customuser_groups_pkey" PRIMARY KEY (id);


--
-- Name: CustomUsers_customuser CustomUsers_customuser_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser"
    ADD CONSTRAINT "CustomUsers_customuser_pkey" PRIMARY KEY (id);


--
-- Name: CustomUsers_customuser_user_permissions CustomUsers_customuser_u_customuser_id_permission_bc0de22a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_user_permissions"
    ADD CONSTRAINT "CustomUsers_customuser_u_customuser_id_permission_bc0de22a_uniq" UNIQUE (customuser_id, permission_id);


--
-- Name: CustomUsers_customuser_user_permissions CustomUsers_customuser_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_user_permissions"
    ADD CONSTRAINT "CustomUsers_customuser_user_permissions_pkey" PRIMARY KEY (id);


--
-- Name: CustomUsers_customuser CustomUsers_customuser_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser"
    ADD CONSTRAINT "CustomUsers_customuser_username_key" UNIQUE (username);


--
-- Name: Options_option Options_option_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Options_option"
    ADD CONSTRAINT "Options_option_pkey" PRIMARY KEY (id);


--
-- Name: Questions_question Questions_question_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Questions_question"
    ADD CONSTRAINT "Questions_question_pkey" PRIMARY KEY (id);


--
-- Name: Results_result Results_result_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Results_result"
    ADD CONSTRAINT "Results_result_pkey" PRIMARY KEY (id);


--
-- Name: Results_result_student_id Results_result_student_id_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Results_result_student_id"
    ADD CONSTRAINT "Results_result_student_id_pkey" PRIMARY KEY (id);


--
-- Name: Results_result_student_id Results_result_student_id_result_id_customuser_id_9daf2c13_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Results_result_student_id"
    ADD CONSTRAINT "Results_result_student_id_result_id_customuser_id_9daf2c13_uniq" UNIQUE (result_id, customuser_id);


--
-- Name: Testings_testing Testings_testing_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Testings_testing"
    ADD CONSTRAINT "Testings_testing_pkey" PRIMARY KEY (id);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: Answers_answer_option_id_id_e35d45ae; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Answers_answer_option_id_id_e35d45ae" ON public."Answers_answer" USING btree (option_id_id);


--
-- Name: Answers_answer_question_id_id_8812eabd; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Answers_answer_question_id_id_8812eabd" ON public."Answers_answer" USING btree (question_id_id);


--
-- Name: Answers_answer_student_id_answer_id_25e60b15; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Answers_answer_student_id_answer_id_25e60b15" ON public."Answers_answer_student_id" USING btree (answer_id);


--
-- Name: Answers_answer_student_id_customuser_id_caafef63; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Answers_answer_student_id_customuser_id_caafef63" ON public."Answers_answer_student_id" USING btree (customuser_id);


--
-- Name: Chapters_chapter_course_id_id_ed8fd3fb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Chapters_chapter_course_id_id_ed8fd3fb" ON public."Chapters_chapter" USING btree (course_id_id);


--
-- Name: Content_content_chapter_id_id_86831f5f; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Content_content_chapter_id_id_86831f5f" ON public."Content_content" USING btree (chapter_id_id);


--
-- Name: CustomUsers_customuser_course_id_course_id_23ef8487; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "CustomUsers_customuser_course_id_course_id_23ef8487" ON public."CustomUsers_customuser_course_id" USING btree (course_id);


--
-- Name: CustomUsers_customuser_course_id_customuser_id_c46694fa; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "CustomUsers_customuser_course_id_customuser_id_c46694fa" ON public."CustomUsers_customuser_course_id" USING btree (customuser_id);


--
-- Name: CustomUsers_customuser_groups_customuser_id_1c0c2610; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "CustomUsers_customuser_groups_customuser_id_1c0c2610" ON public."CustomUsers_customuser_groups" USING btree (customuser_id);


--
-- Name: CustomUsers_customuser_groups_group_id_afcbd69b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "CustomUsers_customuser_groups_group_id_afcbd69b" ON public."CustomUsers_customuser_groups" USING btree (group_id);


--
-- Name: CustomUsers_customuser_user_permissions_customuser_id_fdd4ffa0; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "CustomUsers_customuser_user_permissions_customuser_id_fdd4ffa0" ON public."CustomUsers_customuser_user_permissions" USING btree (customuser_id);


--
-- Name: CustomUsers_customuser_user_permissions_permission_id_cf7167d9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "CustomUsers_customuser_user_permissions_permission_id_cf7167d9" ON public."CustomUsers_customuser_user_permissions" USING btree (permission_id);


--
-- Name: CustomUsers_customuser_username_f92c7caa_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "CustomUsers_customuser_username_f92c7caa_like" ON public."CustomUsers_customuser" USING btree (username varchar_pattern_ops);


--
-- Name: Options_option_question_id_id_fbcb88e5; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Options_option_question_id_id_fbcb88e5" ON public."Options_option" USING btree (question_id_id);


--
-- Name: Questions_question_test_id_id_9846f495; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Questions_question_test_id_id_9846f495" ON public."Questions_question" USING btree (test_id_id);


--
-- Name: Results_result_student_id_customuser_id_76c605b8; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Results_result_student_id_customuser_id_76c605b8" ON public."Results_result_student_id" USING btree (customuser_id);


--
-- Name: Results_result_student_id_result_id_c15e9f35; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Results_result_student_id_result_id_c15e9f35" ON public."Results_result_student_id" USING btree (result_id);


--
-- Name: Results_result_test_id_id_461d7c20; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Results_result_test_id_id_461d7c20" ON public."Results_result" USING btree (test_id_id);


--
-- Name: Testings_testing_course_id_id_3e1e2bfc; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "Testings_testing_course_id_id_3e1e2bfc" ON public."Testings_testing" USING btree (course_id_id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: Answers_answer Answers_answer_option_id_id_e35d45ae_fk_Options_option_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Answers_answer"
    ADD CONSTRAINT "Answers_answer_option_id_id_e35d45ae_fk_Options_option_id" FOREIGN KEY (option_id_id) REFERENCES public."Options_option"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Answers_answer Answers_answer_question_id_id_8812eabd_fk_Questions_question_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Answers_answer"
    ADD CONSTRAINT "Answers_answer_question_id_id_8812eabd_fk_Questions_question_id" FOREIGN KEY (question_id_id) REFERENCES public."Questions_question"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Answers_answer_student_id Answers_answer_stude_answer_id_25e60b15_fk_Answers_a; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Answers_answer_student_id"
    ADD CONSTRAINT "Answers_answer_stude_answer_id_25e60b15_fk_Answers_a" FOREIGN KEY (answer_id) REFERENCES public."Answers_answer"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Answers_answer_student_id Answers_answer_stude_customuser_id_caafef63_fk_CustomUse; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Answers_answer_student_id"
    ADD CONSTRAINT "Answers_answer_stude_customuser_id_caafef63_fk_CustomUse" FOREIGN KEY (customuser_id) REFERENCES public."CustomUsers_customuser"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Chapters_chapter Chapters_chapter_course_id_id_ed8fd3fb_fk_Courses_course_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Chapters_chapter"
    ADD CONSTRAINT "Chapters_chapter_course_id_id_ed8fd3fb_fk_Courses_course_id" FOREIGN KEY (course_id_id) REFERENCES public."Courses_course"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Content_content Content_content_chapter_id_id_86831f5f_fk_Chapters_chapter_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Content_content"
    ADD CONSTRAINT "Content_content_chapter_id_id_86831f5f_fk_Chapters_chapter_id" FOREIGN KEY (chapter_id_id) REFERENCES public."Chapters_chapter"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: CustomUsers_customuser_course_id CustomUsers_customus_course_id_23ef8487_fk_Courses_c; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_course_id"
    ADD CONSTRAINT "CustomUsers_customus_course_id_23ef8487_fk_Courses_c" FOREIGN KEY (course_id) REFERENCES public."Courses_course"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: CustomUsers_customuser_groups CustomUsers_customus_customuser_id_1c0c2610_fk_CustomUse; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_groups"
    ADD CONSTRAINT "CustomUsers_customus_customuser_id_1c0c2610_fk_CustomUse" FOREIGN KEY (customuser_id) REFERENCES public."CustomUsers_customuser"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: CustomUsers_customuser_course_id CustomUsers_customus_customuser_id_c46694fa_fk_CustomUse; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_course_id"
    ADD CONSTRAINT "CustomUsers_customus_customuser_id_c46694fa_fk_CustomUse" FOREIGN KEY (customuser_id) REFERENCES public."CustomUsers_customuser"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: CustomUsers_customuser_user_permissions CustomUsers_customus_customuser_id_fdd4ffa0_fk_CustomUse; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_user_permissions"
    ADD CONSTRAINT "CustomUsers_customus_customuser_id_fdd4ffa0_fk_CustomUse" FOREIGN KEY (customuser_id) REFERENCES public."CustomUsers_customuser"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: CustomUsers_customuser_groups CustomUsers_customus_group_id_afcbd69b_fk_auth_grou; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_groups"
    ADD CONSTRAINT "CustomUsers_customus_group_id_afcbd69b_fk_auth_grou" FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: CustomUsers_customuser_user_permissions CustomUsers_customus_permission_id_cf7167d9_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."CustomUsers_customuser_user_permissions"
    ADD CONSTRAINT "CustomUsers_customus_permission_id_cf7167d9_fk_auth_perm" FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Options_option Options_option_question_id_id_fbcb88e5_fk_Questions_question_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Options_option"
    ADD CONSTRAINT "Options_option_question_id_id_fbcb88e5_fk_Questions_question_id" FOREIGN KEY (question_id_id) REFERENCES public."Questions_question"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Questions_question Questions_question_test_id_id_9846f495_fk_Testings_testing_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Questions_question"
    ADD CONSTRAINT "Questions_question_test_id_id_9846f495_fk_Testings_testing_id" FOREIGN KEY (test_id_id) REFERENCES public."Testings_testing"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Results_result_student_id Results_result_stude_customuser_id_76c605b8_fk_CustomUse; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Results_result_student_id"
    ADD CONSTRAINT "Results_result_stude_customuser_id_76c605b8_fk_CustomUse" FOREIGN KEY (customuser_id) REFERENCES public."CustomUsers_customuser"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Results_result_student_id Results_result_stude_result_id_c15e9f35_fk_Results_r; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Results_result_student_id"
    ADD CONSTRAINT "Results_result_stude_result_id_c15e9f35_fk_Results_r" FOREIGN KEY (result_id) REFERENCES public."Results_result"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Results_result Results_result_test_id_id_461d7c20_fk_Testings_testing_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Results_result"
    ADD CONSTRAINT "Results_result_test_id_id_461d7c20_fk_Testings_testing_id" FOREIGN KEY (test_id_id) REFERENCES public."Testings_testing"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: Testings_testing Testings_testing_course_id_id_3e1e2bfc_fk_Courses_course_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Testings_testing"
    ADD CONSTRAINT "Testings_testing_course_id_id_3e1e2bfc_fk_Courses_course_id" FOREIGN KEY (course_id_id) REFERENCES public."Courses_course"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_CustomUsers_customuser_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT "django_admin_log_user_id_c564eba6_fk_CustomUsers_customuser_id" FOREIGN KEY (user_id) REFERENCES public."CustomUsers_customuser"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

